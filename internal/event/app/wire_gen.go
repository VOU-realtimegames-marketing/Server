// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"VOU-Server/db/sqlc"
	"VOU-Server/internal/event/gapi"
	"VOU-Server/internal/event/handler"
	"VOU-Server/pkg/rabbitmq"
	"VOU-Server/pkg/rabbitmq/consumer"
	"VOU-Server/pkg/rabbitmq/publisher"
	"context"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rabbitmq/amqp091-go"
	"github.com/rs/zerolog/log"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitApp(dbSource string, rabbitMQConnStr rabbitmq.RabbitMQConnStr, grpcServer *grpc.Server) (*App, func(), error) {
	connection, cleanup, err := rabbitMQFunc(rabbitMQConnStr)
	if err != nil {
		return nil, nil, err
	}
	storeDB := storeDBFunc(dbSource)
	eventPublisher, err := publisher.NewPublisher(connection)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	eventConsumer, err := consumer.NewConsumer(connection)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	quizCreatedHandler := handler.NewQuizCreatedHandler(storeDB)
	server := gapi.NewServer(grpcServer, storeDB, eventPublisher)
	app := New(connection, storeDB, eventPublisher, eventConsumer, quizCreatedHandler, server)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func storeDBFunc(dbSource string) db.StoreDB {
	connPool, err := pgxpool.New(context.Background(), dbSource)
	if err != nil {
		log.Fatal().Err(err).Msg("Cannot connect to DB")
	}

	store := db.NewStore(connPool)
	return store
}

func rabbitMQFunc(url rabbitmq.RabbitMQConnStr) (*amqp091.Connection, func(), error) {
	conn, err := rabbitmq.NewRabbitMQConn(url)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}
