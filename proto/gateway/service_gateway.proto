syntax = "proto3";

package vou.proto;

import "google/api/annotations.proto";
import "auth/rpc_create_user.proto";
import "auth/rpc_login_user.proto";
import "auth/rpc_authorize_user.proto";
import "auth/rpc_renew_access_token.proto";
import "auth/rpc_verify_email.proto";

import "counterpart/rpc_create_store.proto";
import "counterpart/rpc_get_stores_of_owner.proto";
import "counterpart/rpc_update_store.proto";
import "counterpart/rpc_delete_store.proto";

import "counterpart/rpc_create_branch.proto";
import "counterpart/rpc_get_branchs.proto";
import "counterpart/rpc_delete_branch.proto";

import "event-quiz/rpc_create_event.proto";
import "event-quiz/rpc_get_events_of_owner.proto";
import "event-quiz/rpc_get_all_events.proto";
import "event-quiz/rpc_get_event_by_id.proto";
import "event-quiz/rpc_update_event_status.proto";
import "event-quiz/rpc_get_quizzes_by_event_id.proto";
import "event-quiz/rpc_get_my_vouchers.proto";
import "event-quiz/rpc_win_voucher.proto";

import "user/rpc_get_all_other_users.proto";

option go_package = "VOU-Server/proto/gen";

service Gateway {
  // BEGIN AUTH
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/create_user"
      body: "*"
    };
  }
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/login_user"
      body: "*"
    };
  }
  rpc AuthorizeUser(AuthorizeRequest) returns (AuthorizeResponse) {
    option (google.api.http) = {
      get: "/api/v1/authorize"
    };
  }
  rpc RenewAccessToken(RenewAccessTokenRequest) returns (RenewAccessTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/tokens/renew_access"
      body: "*"
    };
  }
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {}
  // END AUTH

  // BEGIN COUNTERPART
  rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse) {
    option (google.api.http) = {
      post: "/api/v1/create_store"
      body: "*"
    };
  }
  rpc GetAllStoresOfOwner(GetStoresOfOwnerRequest) returns (GetStoresOfOwnerResponse) {
    option (google.api.http) = {
      get: "/api/v1/stores"
    };
  }
  rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse) {
    option (google.api.http) = {
      patch: "/api/v1/stores/{id}"
      body: "*"
    };
  }
  rpc DeleteStore(DeleteStoreRequest) returns (DeleteStoreResponse) {
    option (google.api.http) = {
      delete: "/api/v1/stores/{id}"
      body: "*"
    };
  }

  rpc CreateBranch(CreateBranchRequest) returns (CreateBranchResponse) {
    option (google.api.http) = {
      post: "/api/v1/create_branch"
      body: "*"
    };
  }
  rpc GetBranchs(GetBranchsRequest) returns (GetBranchsResponse) {
    option (google.api.http) = {
      get: "/api/v1/stores/{store_id}/branches"
    };
  }
  rpc DeleteBranch(DeleteBranchRequest) returns (DeleteBranchResponse) {
    option (google.api.http) = {
      delete: "/api/v1/branches/{id}"
      body: "*"
    };
  }
  // END COUNTERPART

  // BEGIN EVENT-QUIZ
  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/create_event"
      body: "*"
    };
  }
  rpc GetAllEvents(GetAllEventsRequest) returns (GetAllEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/events"
    };
  }
  rpc GetAllEventsOfOwner(GetEventsOfOwnerRequest) returns (GetEventsOfOwnerResponse) {
    option (google.api.http) = {
      get: "/api/v1/events/owner/{owner}"
    };
  }
  rpc GetEventById(GetEventByIdRequest) returns (GetEventByIdResponse) {
    option (google.api.http) = {
      get: "/api/v1/events/{id}"
    };
  }
  rpc UpdateEventStatus(UpdateEventStatusRequest) returns (UpdateEventStatusResponse) {
    option (google.api.http) = {
      patch: "/api/v1/events/{id}/status"
      body: "*"
    };
  }

  rpc GetQuizzesByEventId(GetQuizzesByEventIdRequest) returns (GetQuizzesByEventIdResponse) {
    option (google.api.http) = {
      get: "/api/v1/quizzes"
    };
  }

  rpc GetMyVouchers(GetMyVouchersRequest) returns (GetMyVouchersResponse) {
    option (google.api.http) = {
      get: "/api/v1/me/vouchers"
    };
  }

  rpc WinVoucher(WinVoucherRequest) returns (WinVoucherResponse) {}
  // END EVENT-QUIZ


  // BEGIN USER
  rpc GetAllOtherUsers(GetAllOtherUsersRequest) returns (GetAllOtherUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/other_users"
    };
  }
  // END USER
}
