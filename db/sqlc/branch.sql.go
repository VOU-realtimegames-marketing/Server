// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: branch.sql

package db

import (
	"context"
)

const createBranch = `-- name: CreateBranch :one
INSERT INTO branchs (
  store_id,
  name,
  position,
  city_name,
  country,
  address,
  emoji
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, store_id, name, position, city_name, country, address, emoji
`

type CreateBranchParams struct {
	StoreID  int64  `json:"store_id"`
	Name     string `json:"name"`
	Position string `json:"position"`
	CityName string `json:"city_name"`
	Country  string `json:"country"`
	Address  string `json:"address"`
	Emoji    string `json:"emoji"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) (Branch, error) {
	row := q.db.QueryRow(ctx, createBranch,
		arg.StoreID,
		arg.Name,
		arg.Position,
		arg.CityName,
		arg.Country,
		arg.Address,
		arg.Emoji,
	)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Position,
		&i.CityName,
		&i.Country,
		&i.Address,
		&i.Emoji,
	)
	return i, err
}

const deleteBranch = `-- name: DeleteBranch :exec
DELETE FROM branchs
WHERE id = $1
`

func (q *Queries) DeleteBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBranch, id)
	return err
}

const listBranchs = `-- name: ListBranchs :many
SELECT id, store_id, name, position, city_name, country, address, emoji FROM branchs
WHERE store_id = $1
`

func (q *Queries) ListBranchs(ctx context.Context, storeID int64) ([]Branch, error) {
	rows, err := q.db.Query(ctx, listBranchs, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Branch{}
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Name,
			&i.Position,
			&i.CityName,
			&i.Country,
			&i.Address,
			&i.Emoji,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
