// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: store.sql

package db

import (
	"context"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
  owner,
  name,
  business_type
) VALUES (
  $1, $2, $3
) RETURNING id, owner, name, business_type
`

type CreateStoreParams struct {
	Owner        string `json:"owner"`
	Name         string `json:"name"`
	BusinessType string `json:"business_type"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, createStore, arg.Owner, arg.Name, arg.BusinessType)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.BusinessType,
	)
	return i, err
}

const listStoresOfOwner = `-- name: ListStoresOfOwner :many
SELECT id, owner, name, business_type FROM stores
WHERE owner = $1
`

func (q *Queries) ListStoresOfOwner(ctx context.Context, owner string) ([]Store, error) {
	rows, err := q.db.Query(ctx, listStoresOfOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Store{}
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.BusinessType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
